Default running port: 6379

Run in Docker:
$ docker run -p 6379:6379 redis[:<tag>]

Redis (REmote DIctionary Service) has a client-server architecture and uses a
request-response model. The client connects to a Redis server through TCP
connection.
Redis is an advanced key-value store. It is often referred to as a data
structure server, since the keys can contain strings, hashes, lists, sets
and sorted sets.
Redis is exceptionally fast, its operations are atomic (even if multiple
clients access the same key there won't be conflict), supports rich data types,
and it's a multi-utility tool (cache, Pub/Sub, messaging-queue, web
sessions...).

Redis has three main peculiarities that sets it apart:
    - Holds its database entirely in the memory, using the disk only for
    persistence.
    - Has a relatively rich set of data types when compared to many key-value
    data stores.
    - Can replicate data to any number of slaves.

Redis keys are always strings.
Basic data types for values:
    - Strings.
    - Hashes: a mapping of string:string, called field-value pairs, that sits
    under one top-level key. Represents objects.
    - Lists.
    - Sets (unordered).
    - Sorted Sets.

`nil` is Redis' `null`.

Pipeline
Is designed to perform mass insertion. Normally, each operation
necessitates a back-and-forth round trip to the server. With a pipeline, all
the commands are buffered on the client side and then sent at once. So only
one round trip is made.

Transaction
A transaction block defines a set of operations that have to be run atomically.
Meaning that either all should be completed successfully or neither should be.

Optimistic locking using Check-and-Set (CAS)
Keys can be monitored in order to detect changes against them. If at least one
watched key is modified before the transaction is executed, the whole
transaction aborts. This is useful to avoid race conditions by multiple
clients.

Snapshotting
Redis database is held in memory (RAM), however, it can also be persisted to
disk in a process called snapshotting. A RDB snapshot is a full point-in-time
capture of the database.

redis.conf
    Configuration file at Redis root directory. It is possible to GET and SET
    all configurations from cli (CONFIG command).
    By default saved on /etc/redis/6379.conf
