In general, the command's starting letter indicates the data type which
operates.

To spawn a shell:
$ redis-cli [-h <host>] [-p <port>] [-a <password>] [-n <db_number>]
-n the DB's number, each being independent.

To use pipeline for mass insertion:
$ cat <source_file.txt> | redis-cli --pipe

Check server:
>>> PING [message]

Display server info:
>>> INFO

Flush database:
>>> FLUSHDB

Take snapshot (persists DB) (see redis.conf for binary file settings):
>>> SAVE
Or BGSAVE for saving in background.

Exit:
>>> QUIT

Reference existing variables in shell:
>>> $<variable>

Set the value of the config variable:
>>> CONFIG SET <variable_name>

Get the value of the config variable:
>>> CONFIG GET <variable_name>

Use `M` to SET/GET Multiple items.
Set new key-value pair:
>>> [M]SET <key> <value> [<key> <value>...]

Get existing key's value:
>>> [M]GET <key> [<key>...]

Check if key exists:
>>> EXISTS <key>
Returns 1 if it does, 0 otherwise.

Delete existing key-value pair:
>>> DEL <key>
Returns 1 or 0 depending on whether the key existed (removed) or not

Set expiry time in seconds from current server timestamp - it will vanish
(delete) on due time:
>>> EXPIRE <key> <seconds>

Remove the expiry time:
>>> PERSIST <key>

Set a new key with expiry time
>>> SETEX <key> <seconds> <value>

Check time left fo expiry (Time-To-Live):
>>> TTL <key>
Returns -1 if there is no expiry time.

Alter an integer value:
>>> INCR key
INCR to increase by 1.
DECR to decrease by 1.
INCRBY to increase by n.
DECRBY to decrease by n.

Set new hash:
>>> H[M]SET <key> <field> <value> [<field> <value> ...]

Get single field of existing hash value:
>>> H[M]GET <key> <field> [<field> ...]

Get all fields of existing hash value:
>>> HGETALL <key>

Set new set:
>>> SADD <key> <value_1> ... <value_n>

Get set's members:
>>> SMEMBERS <key>

Check membership:
>>> SISMEMBER <key> <value>
Returns 1 if it does, 0 otherwise.

Adding new element to list's head (left)
>>> LPUSH <key> <value_1> ... <value_n>
RPUSH to add new element to list's tail (right)

Extract elements from list:
>>> LRANGE <key> <start> <stop>
Use start=0 stop=-1 to query all.

Popping an element from list's head (left)
>>> LPOP <key>
RPOP to pop an element from list's tail (right)

Starting a transaction block:
>>> MULTI
All subsequence operations will be queued in buffer, until...

Executing a transaction block:
>>> EXEC

Discarding the transaction block - queue is all flushed out:
>>> DISCARD

Watching a key for optimistic locking:
>>> WATCH <key>
Start a MULTI block and define operations.
The key will be watched until EXEC is called.

Unwatch a key prior to EXEC:
>>> UNWATCH [<key>]
If no key is passed, all keys will be flushed.
